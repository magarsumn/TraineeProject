@page "/attendance/edit/{attendanceId:int}"
@using HRApp.Shared.Entities
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>Edit Department</h3>
<MuForm class="d-flex">
    <MudGrid>
        <MudItem xs="12" sm="12" >
            <MudDatePicker Label="Date" DisplayMonths="2" TitleDateFormat="dddd, dd MMMM" @bind-Date="attendance.Date" Variant="Variant.Outlined"/>
        </MudItem> 
        <MudItem xs="12" sm="12" >
            <MudTextField Margin="Margin.Dense"style="height:41px" @bind-Value="attendance.EmployeeId" For="@(() => attendance.EmployeeId)" Label="Employee" Variant="Variant.Outlined"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="12" >
            <MudTextField Margin="Margin.Dense"style="height:41px" @bind-Value="attendance.Status" For="@(() => attendance.Status)" Label="Status" Variant="Variant.Outlined"></MudTextField>
        </MudItem> 
        <MudItem xs="12" sm="12" >
            <MudTextField Margin="Margin.Dense"style="height:41px" @bind-Value="attendance.Remarks" For="@(() => attendance.Remarks)" Label="Remarks" Variant="Variant.Outlined"></MudTextField>
        </MudItem>
    </MudGrid>
</MuForm>
<br/>
<br/>
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="EditAttendance">Update</MudButton>


@code {
    bool success;
    [Parameter] public int attendanceId { get; set; }
    Attendence attendance = new Attendence();
    protected async override Task OnParametersSetAsync()
    {
        attendance = await http.GetFromJsonAsync<Attendence>($"api/Attendence/{attendanceId}");
    }
    async Task EditAttendance()
    {
        await http.PutAsJsonAsync("api/Attendence", attendance);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("attendance");
    }
    
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}